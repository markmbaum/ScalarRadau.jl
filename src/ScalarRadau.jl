module ScalarRadau

using StaticArrays: SMatrix, SVector

export radau, radau!

#-------------------------------------------------------------------------------
#RK tableau for RadauIIA 5th order

const c‚ÇÅ = (4 - ‚àö6)/10
const c‚ÇÇ = (4 + ‚àö6)/10
const c‚ÇÉ = 1.0

const a‚ÇÅ‚ÇÅ = (88 - 7*‚àö6)/360
const a‚ÇÅ‚ÇÇ = (296 - 169*‚àö6)/1800
const a‚ÇÅ‚ÇÉ = (-2 + 3*‚àö6)/225

const a‚ÇÇ‚ÇÅ = (296 + 169*‚àö6)/1800
const a‚ÇÇ‚ÇÇ = (88 + 7*‚àö6)/360
const a‚ÇÇ‚ÇÉ = (-2 - 3*‚àö6)/225

const a‚ÇÉ‚ÇÅ = (16 - ‚àö6)/36
const a‚ÇÉ‚ÇÇ = (16 + ‚àö6)/36
const a‚ÇÉ‚ÇÉ = 1/9

const e‚ÇÅ = (-13 - 7*‚àö6)/3
const e‚ÇÇ = (-13 + 7*‚àö6)/3
const e‚ÇÉ = -1/3

#-------------------------------------------------------------------------------
#support functions

function ‚àÇf‚àÇy(ùíá::T, x, y, param, f‚ÇÄ, h, œµ) where {T}
    #don't use a step size that risks roundoff error
    ‚àÇy = max(œµ*h, sqrt(eps(y)))
    #compute a regular old forward diff
    (ùíá(x, y + ‚àÇy, param) - f‚ÇÄ)/‚àÇy
end

function Jacobian(h, ‚àÇ)::SMatrix{3,3}
    #temporary
    q = h*‚àÇ
    #column-major storage   
    SMatrix{3,3}(
        1.0 - a‚ÇÅ‚ÇÅ*q,
        -a‚ÇÇ‚ÇÅ*q,
        -a‚ÇÉ‚ÇÅ*q,
        -a‚ÇÅ‚ÇÇ*q,
        1.0 - a‚ÇÇ‚ÇÇ*q,
        -a‚ÇÉ‚ÇÇ*q,
        -a‚ÇÅ‚ÇÉ*q,
        -a‚ÇÇ‚ÇÉ*q,
        1.0 - a‚ÇÉ‚ÇÉ*q
    )
end

function xinit(x, h)
    x‚ÇÅ = x + h*c‚ÇÅ
    x‚ÇÇ = x + h*c‚ÇÇ
    x‚ÇÉ = x + h*c‚ÇÉ
    return x‚ÇÅ, x‚ÇÇ, x‚ÇÉ
end

function hinit(x‚ÇÄ, x‚Çô, f, atol, rtol)
    x = max(abs(x‚ÇÄ), abs(x‚Çô))
    d = (1/x)^6 + abs(f)^6
    h = ((atol + rtol)/d)^(1/6)
    return min(h, x‚Çô - x‚ÇÄ)
end

#-------------------------------------------------------------------------------
# wrappers

function radau(ùíá::F,
               y‚ÇÄ::Real,
               x‚ÇÄ::Real,
               x‚Çô::Real,
               param=nothing;
               kwargs...
               ) where {F}
    radau!((), (), ùíá, y‚ÇÄ, x‚ÇÄ, x‚Çô, param; kwargs...)
end

function radau(ùíá::F,
               y‚ÇÄ::Real,
               x‚ÇÄ::Real,
               x‚Çô::Real,
               nout::Int,
               param=nothing;
               kwargs...
               ) where {F}
    @assert nout > 1 "number of output points should be greater than 1"
    #make y float
    y‚ÇÄ = float(y‚ÇÄ)
    #evenly spaced output points
    x = LinRange(x‚ÇÄ, x‚Çô, nout)
    #space for results
    y = zeros(typeof(y‚ÇÄ), nout)
    #integrate!
    radau!(y, x, ùíá, y‚ÇÄ, x‚ÇÄ, x‚Çô, param; kwargs...)
    return x, y
end

#-------------------------------------------------------------------------------
#main function

function radau!(yout::Union{AbstractVector{<:Real},Tuple{}},
                xout::Union{AbstractVector{<:Real},Tuple{}},
                ùíá::F,
                y‚ÇÄ::Real,
                x‚ÇÄ::Real,
                x‚Çô::Real,
                param=nothing;
                rtol::Real=1e-6,
                atol::Real=1e-6,
                facmax::Real=100.0,
                facmin::Real=0.01,
                Œ∫::Real=1e-3,
                œµ::Real=0.25,
                maxnewt::Int=7,
                maxstep::Int=1000000,
                maxfail::Int=10) where {F}
    #basic checks
    @assert x‚Çô >= x‚ÇÄ
    @assert rtol < 1
    @assert facmax > 1
    @assert 0 < facmin < 1
    @assert 0 < Œ∫ < 1
    @assert 0 < œµ < 1
    #set initial coordinates
    x, y = float(x‚ÇÄ), float(y‚ÇÄ)
    #initial function eval at x0
    f‚ÇÄ = ùíá(x, y, param)
    #output points
    nout = length(xout)
    jout = 1 #tracking index
    #initial step size selection
    h‚ÇÅ = hinit(x, x‚Çô, f‚ÇÄ, atol, rtol)
    h‚ÇÇ = hinit(x, x‚Çô, ùíá(x + h‚ÇÅ, y + h‚ÇÅ*f‚ÇÄ, param), atol, rtol)
    h = min(h‚ÇÅ, h‚ÇÇ)
    #allocation, essentially, to keep f‚ÇÉ in scope
    f‚ÇÉ = zero(f‚ÇÄ)
    #counter
    nstep = 0
    while x < x‚Çô
        #don't overshoot the end of the integration interval
        h = min(h, x‚Çô - x)
        #finite diff ‚àÇf/‚àÇy, precision not necessary in practice, can also hurt
        ‚àÇ = ‚àÇf‚àÇy(ùíá, x, y, param, f‚ÇÄ, h, œµ)
        #jacobian matrix
        J = Jacobian(h, ‚àÇ)
        #x coordinates for function evaluations inside interval
        x‚ÇÅ, x‚ÇÇ, x‚ÇÉ = xinit(x, h)
        #initial newton guesses, extrapolation appears to make things slower
        z‚ÇÅ, z‚ÇÇ, z‚ÇÉ = zero(y), zero(y), zero(y)
        #newton iterations
        ŒîZ = Inf # ‚àû norm of changes to solution
        Œ∑ = Œ∫*(rtol*abs(y) + atol) #termination threshold
        nnewt = 0
        nfail = 0
        while ŒîZ > Œ∑
            if nnewt == maxnewt
                #count the convergence failure
                nfail += 1
                #cut off unending disasters
                (nfail == maxfail) && error("repeated Newton convergence failures ($nfail) in Radau")
                #steeply reduce step size
                h /= 10.0
                #wipe the iteration counter
                nnewt = 0
                #reinitialize with the new step size
                J = Jacobian(h, ‚àÇf‚àÇy(ùíá, x, y, param, f‚ÇÄ, h, œµ))
                x‚ÇÅ, x‚ÇÇ, x‚ÇÉ = xinit(x, h)
                z‚ÇÅ, z‚ÇÇ, z‚ÇÉ = zero(y), zero(y), zero(y)
            end
            #function evaluations
            f‚ÇÅ = ùíá(x‚ÇÅ, y + z‚ÇÅ, param)
            f‚ÇÇ = ùíá(x‚ÇÇ, y + z‚ÇÇ, param)
            f‚ÇÉ = ùíá(x‚ÇÉ, y + z‚ÇÉ, param)
            #newton system evaluation Œ≤ = (h * Af) - z
            Œ≤ = SVector{3}(
                h*(a‚ÇÅ‚ÇÅ*f‚ÇÅ + a‚ÇÅ‚ÇÇ*f‚ÇÇ + a‚ÇÅ‚ÇÉ*f‚ÇÉ) - z‚ÇÅ,
                h*(a‚ÇÇ‚ÇÅ*f‚ÇÅ + a‚ÇÇ‚ÇÇ*f‚ÇÇ + a‚ÇÇ‚ÇÉ*f‚ÇÉ) - z‚ÇÇ,
                h*(a‚ÇÉ‚ÇÅ*f‚ÇÅ + a‚ÇÉ‚ÇÇ*f‚ÇÇ + a‚ÇÉ‚ÇÉ*f‚ÇÉ) - z‚ÇÉ
            )
            #solve the linear system J*Œ¥ = Œ≤
            Œ¥‚ÇÅ, Œ¥‚ÇÇ, Œ¥‚ÇÉ = J\Œ≤
            #update
            z‚ÇÅ += Œ¥‚ÇÅ
            z‚ÇÇ += Œ¥‚ÇÇ
            z‚ÇÉ += Œ¥‚ÇÉ
            #norm of updates
            ŒîZ = abs(Œ¥‚ÇÅ) + abs(Œ¥‚ÇÇ) + abs(Œ¥‚ÇÉ)
            #count
            nnewt += 1
        end
        #scaled error estimate
        ze = (f‚ÇÄ*h + z‚ÇÅ*e‚ÇÅ + z‚ÇÇ*e‚ÇÇ + z‚ÇÉ*e‚ÇÉ)/5
        sc = rtol*abs(max(y, y + z‚ÇÉ)) + atol
        err = abs(ze)/sc
        #accept the step?
        if err < 1.0
            #reserve previous point for interpolation
            x‚Çö = x
            y‚Çö = y
            #advance the solution
            x += h
            y += z‚ÇÉ
            #dense output
            @inbounds if (jout <= nout) && ((x > xout[jout]) | (x ‚âà xout[jout]))
                #set up cubic Hermite
                u = h*f‚ÇÄ
                v = h*f‚ÇÉ
                H‚ÇÉ =  2y‚Çö  + u - 2y + v
                H‚ÇÇ = -3y‚Çö - 2u + 3y - v
                #interpolate at all points that have been passed or met
                while (jout <= nout) && (x >= xout[jout])
                    Œæ = (xout[jout] - x‚Çö)/h
                    yout[jout] += y‚Çö + Œæ*(u + Œæ*(H‚ÇÇ + Œæ*H‚ÇÉ))
                    jout += 1
                end
            end
            #f‚ÇÉ is now at the beginning of the next interval
            f‚ÇÄ = f‚ÇÉ
        end
        #count
        nstep += 1
        if nstep == maxstep
            error("maximum number of steps/attempts ($maxstep) reached in radau @ nx=$x y=$y h=$h")
        end
        #safety factor, loosely dependent on number of newton iterations
        facsaf = 0.9*(maxnewt + 1)/(maxnewt + nnewt)
        #step size selection, double sqrt faster than ^(1/4)
        h *= min(facmax, max(facmin, facsaf*sqrt(sqrt(1/err))))
    end
    return y
end

end
